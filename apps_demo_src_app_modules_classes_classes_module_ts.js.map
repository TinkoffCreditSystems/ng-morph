{"version":3,"file":"apps_demo_src_app_modules_classes_classes_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AACwD;AACK;AACH;AACN;AACM;;;;;ICHtDK,4DAAA,QAAG;IAAAA,oDAAA,gEAAyD;IAAAA,0DAAA,EAAI;IAEhEA,4DAAA,cAAS;IACHA,oDAAA,kBAAW;IAAAA,0DAAA,EAAK;IAEpBA,4DAAA,QAAG;IACDA,oDAAA,4GAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAAkE;IACpEA,0DAAA,EAAU;IAEVA,4DAAA,cAAS;IACHA,oDAAA,mBAAW;IAAAA,0DAAA,EAAK;IAEpBA,4DAAA,SAAG;IACDA,oDAAA,+GAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,uBAAyE;IAC3EA,0DAAA,EAAU;IAEVA,4DAAA,eAAS;IACHA,oDAAA,oBAAY;IAAAA,0DAAA,EAAK;IAErBA,4DAAA,SAAG;IACDA,oDAAA,yIAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,uBAAmE;IACrEA,0DAAA,EAAU;IAEVA,4DAAA,eAAS;IACHA,oDAAA,sBAAc;IAAAA,0DAAA,EAAK;IAEvBA,4DAAA,SAAG;IACDA,oDAAA,kHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,uBAAqE;IACvEA,0DAAA,EAAU;;;;IAlC8BA,uDAAA,GAAY;IAAZA,wDAAA,SAAAO,MAAA,CAAAC,GAAA,CAAY;IAWZR,uDAAA,GAAmB;IAAnBA,wDAAA,SAAAO,MAAA,CAAAE,UAAA,CAAmB;IAWnBT,uDAAA,GAAa;IAAbA,wDAAA,SAAAO,MAAA,CAAAG,IAAA,CAAa;IAWbV,uDAAA,GAAe;IAAfA,wDAAA,SAAAO,MAAA,CAAAI,MAAA,CAAe;;;;;IAKvDX,4DAAA,QAAG;IACDA,oDAAA,wHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAA2E;;;;IAArCA,uDAAA,GAAqB;IAArBA,wDAAA,SAAAY,MAAA,CAAAC,YAAA,CAAqB;;;;;IAI3Db,4DAAA,QAAG;IACDA,oDAAA,mHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAAsE;;;;IAAhCA,uDAAA,GAAgB;IAAhBA,wDAAA,SAAAc,MAAA,CAAAC,OAAA,CAAgB;;;;;IAItDf,4DAAA,QAAG;IACDA,oDAAA,sHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAAyE;;;;IAAnCA,uDAAA,GAAmB;IAAnBA,wDAAA,SAAAgB,MAAA,CAAAC,UAAA,CAAmB;;;;;IAIzDjB,4DAAA,QAAG;IACDA,oDAAA,qHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAAwE;;;;IAAlCA,uDAAA,GAAkB;IAAlBA,wDAAA,SAAAkB,MAAA,CAAAC,SAAA,CAAkB;;;;;IAIxDnB,4DAAA,QAAG;IACDA,oDAAA,sHAEF;IAAAA,0DAAA,EAAI;IAEJA,uDAAA,sBAAyE;;;;IAAnCA,uDAAA,GAAmB;IAAnBA,wDAAA,SAAAoB,MAAA,CAAAC,UAAA,CAAmB;;;ADpF7D,MAAMb,GAAG,GAAG;;;;;;;;;;;;;;;;;;;;;;CAsBX;AAED,MAAME,IAAI,GAAG;;;;;;;;;;;;;;;;;CAiBZ;AAED,MAAMC,MAAM,GAAG;;;;;;;;mDAQoC;AAEnD,MAAMF,UAAU,GAAG;;;;;;;;;;;;;CAalB;AAED,MAMaa,gBAAgB;EAN7BC,YAAA;IAOW,KAAAf,GAAG,GAAGA,GAAG;IACT,KAAAE,IAAI,GAAGA,IAAI;IACX,KAAAC,MAAM,GAAGA,MAAM;IACf,KAAAF,UAAU,GAAGA,UAAU;IAEvB,KAAAU,SAAS,GAAGxB,iEAAiB;IAC7B,KAAAoB,OAAO,GAAGjB,6DAAe;IACzB,KAAAmB,UAAU,GAAGlB,mEAAkB;IAC/B,KAAAsB,UAAU,GAAGxB,mEAAkB;IAC/B,KAAAgB,YAAY,GAAGjB,sEAAoB;;EAC7C,QAAA4B,CAAA;qBAXYF,gBAAgB;EAAA;EAAA,QAAAG,EAAA;UAAhBH,gBAAgB;IAAAI,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,0BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCjF7BhC,4DAAA,sBAA+B;QAC7BA,wDAAA,IAAAmC,uCAAA,0BA8Cc;QAEdnC,wDAAA,IAAAoC,uCAAA,yBAOc;QAEdpC,wDAAA,IAAAqC,uCAAA,yBAOc;QAEdrC,wDAAA,IAAAsC,uCAAA,yBAOc;QAEdtC,wDAAA,IAAAuC,uCAAA,yBAOc;QAEdvC,wDAAA,IAAAwC,uCAAA,yBAOc;QAChBxC,0DAAA,EAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FgC;AAC4B;AAC5B;AACQ;;;AAEvD,MASa6C,aAAa;EAAA,QAAArB,CAAA;qBAAbqB,aAAa;EAAA;EAAA,QAAApB,EAAA;UAAboB;EAAa;EAAA,QAAAC,EAAA;cAPtBF,yDAAa,EACbF,kEAAiB,EACjBD,yDAAY,CAACM,QAAQ,CAACJ,sEAAiB,CAACrB,gEAAgB,CAAC,CAAC;EAAA;;AAKpC;;sHAAbuB,aAAa;IAAAG,YAAA,GAHT1B,gEAAgB;IAAA2B,OAAA,GAJ7BL,yDAAa,EACbF,kEAAiB,EAAAQ,yDAAA;IAAAC,OAAA,GAIT7B,gEAAgB;EAAA;AAAA;;;;;;;;;;;;;;ACbrB,MAAM3B,iBAAiB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BhC;;;;;;;;;;;;;;AC9BM,MAAMC,oBAAoB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCnC;;;;;;;;;;;;;;ACpCM,MAAMC,kBAAkB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmEjC;;;;;;;;;;;;;;ACnEM,MAAMC,eAAe,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8B9B;;;;;;;;;;;;;;AC9BM,MAAMC,kBAAkB,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6BjC","sources":["./apps/demo/src/app/modules/classes/classes.component.ts","./apps/demo/src/app/modules/classes/classes.template.html","./apps/demo/src/app/modules/classes/classes.module.ts","./apps/demo/src/app/modules/classes/samples/accessors.ts","./apps/demo/src/app/modules/classes/samples/contructors.ts","./apps/demo/src/app/modules/classes/samples/decorators.ts","./apps/demo/src/app/modules/classes/samples/methods.ts","./apps/demo/src/app/modules/classes/samples/properties.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ACCESSORS_SAMPLES } from './samples/accessors';\nimport { CONSTRUCTORS_SAMPLES } from './samples/contructors';\nimport { DECORATORS_SAMPLES } from './samples/decorators';\nimport { METHODS_SAMPLES } from './samples/methods';\nimport { PROPERTIES_SAMPLES } from './samples/properties';\n\nconst add = `import {\n    addClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddClasses('some/path/file.ts', {\n    name: 'A',\n    isDefaultExport: true,\n    methods: [\n      {\n        name: 'method',\n        isStatic: true,\n        statements: 'return 0',\n        returnType: 'number',\n      },\n    ],\n});\n\nsaveActiveProject();\n`;\n\nconst edit = `import {\n    getClasses,\n    editClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst classes = getClasses('some/path/file.ts');\n\neditClasses(classes, classEntity => ({\n  isExported: true,\n  name: classEntity.name.replace('Test', ''),\n}));\n\nsaveActiveProject();\n`;\n\nconst remove = `import {\n    removeClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nremoveClasses(getClasses('**/**', { name: 'A' }));`;\n\nconst getClasses = `import {\n    getClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst allClassesWithNameB = getClasses('some/path/**.ts', {\n    name: 'B',\n});\n\nsaveActiveProject();\n`;\n\n@Component({\n  selector: 'classes',\n  templateUrl: 'classes.template.html',\n  styleUrls: ['./classes.style.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClassesComponent {\n  readonly add = add;\n  readonly edit = edit;\n  readonly remove = remove;\n  readonly getClasses = getClasses;\n\n  readonly accessors = ACCESSORS_SAMPLES;\n  readonly methods = METHODS_SAMPLES;\n  readonly properties = PROPERTIES_SAMPLES;\n  readonly decorators = DECORATORS_SAMPLES;\n  readonly constructors = CONSTRUCTORS_SAMPLES;\n}\n","<tui-doc-page header=\"Classes\">\n  <ng-template pageTab=\"Classes\">\n    <p>You can manipulate with classes using the following utils</p>\n\n    <section>\n      <h2>Add classes</h2>\n\n      <p>\n        You can generate a class from declarative description. Use autocomplete\n        to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"add\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Get classes</h2>\n\n      <p>\n        You can get all classes with some declarative condition. Use\n        autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"getClasses\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Edit classes</h2>\n\n      <p>\n        You can edit existing classes with a handler returining a declarative\n        description. Use autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"edit\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Remove classes</h2>\n\n      <p>\n        You can remove all classes with some declarative condition. Use\n        autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"remove\"></tui-doc-code>\n    </section>\n  </ng-template>\n\n  <ng-template pageTab=\"Constructors\">\n    <p>\n      You can create, get, edit and remove constructors of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"constructors\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Methods\">\n    <p>\n      You can create, get, edit and remove methods of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"methods\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Properties\">\n    <p>\n      You can create, get, edit and remove properties of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"properties\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Accessors\">\n    <p>\n      You can create, get, edit and remove accessors of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"accessors\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Decorators\">\n    <p>\n      You can create, get, edit and remove decorators of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"decorators\"></tui-doc-code>\n  </ng-template>\n</tui-doc-page>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { TuiAddonDocModule, tuiGenerateRoutes } from '@taiga-ui/addon-doc';\nimport { TuiLinkModule } from '@taiga-ui/core';\nimport { ClassesComponent } from './classes.component';\n\n@NgModule({\n  imports: [\n    TuiLinkModule,\n    TuiAddonDocModule,\n    RouterModule.forChild(tuiGenerateRoutes(ClassesComponent)),\n  ],\n  declarations: [ClassesComponent],\n  exports: [ClassesComponent],\n})\nexport class ClassesModule {}\n","export const ACCESSORS_SAMPLES = `import {\n    addAccessors,\n    getAccessors,\n    editAccessors,\n    removeAccessors,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddAccessors(getClasses('some/path/file.ts'), [\n    {\n      name: 'setter',\n      kind: StructureKind.SetAccessor,\n    },\n]);\n    \nconst declarations = getAccessors(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditAccessors(declarations, () => ({\n    name: 'anotherName',\n}));\n\nremoveAccessors(declarations);\n\nsaveActiveProject();\n`;\n","export const CONSTRUCTORS_SAMPLES = `import {\n    addConstructors,\n    getConstructors,\n    editConstructors,\n    removeConstructors,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddConstructors(getClasses('some/path/file.ts', { name: 'B' }), {\n    parameters: [\n      {\n        decorators: [{ name: 'Inject', arguments: ['SomeType'] }],\n        name: 'param',\n        type: 'SomeType',\n      },\n    ],\n    scope: Scope.Protected,\n});\n\n// Result is:\nclass B {\n    protected constructor(@Inject(SomeType) param: SomeType) {}\n}\n\nconst declarations = getConstructors(getClasses('some/path/**.ts'));\n\neditConstructors(declarations, () => ({\n    scope: Scope.Protected,\n}));\n\nremoveConstructors(declarations);\n\nsaveActiveProject();\n`;\n","export const DECORATORS_SAMPLES = `import {\n    addDecorators,\n    getDecorators,\n    editDecorators,\n    removeDecorators,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst classes = getClasses('some/path/file.ts');\nconst methods = getMethods(classes, { name: 'method' });\nconst constructorParams = getParams(getConstructors(classes), {\n  name: 'param',\n});\nconst methodParams = getParams(methods);\nconst properties = getProperties(classes, { name: 'property' });\nconst getAccessorss = getAccessors(classes, { name: 'getAccessor' });\nconst setAccessors = getAccessors(classes, { name: 'setAccessor' });\n\naddDecorators(classes, {\n  name: 'Component',\n  arguments: [\"{template: ''}\"],\n});\n\naddDecorators(methods, {\n  name: 'Required',\n  arguments: [],\n});\n\naddDecorators(constructorParams, {\n  name: 'Optional',\n  arguments: [],\n});\n\naddDecorators(methodParams, {\n  name: 'Pure',\n  arguments: [],\n});\n\naddDecorators(properties, {\n  name: 'ContentChild',\n  arguments: ['SomeComponent'],\n});\n\naddDecorators(getAccessorss, {\n  name: 'AnotherDecorator',\n  arguments: ['SomeComponent', \"['string']\"],\n});\n\naddDecorators(setAccessors, {\n  name: 'SetDecorator',\n  arguments: [\"[1, 3]\"],\n});\n\nconst declarations = getAllDecorators('some/path/**.ts', {\n    name: 'Inject',\n});\n\neditDecorators(declarations, () => ({\n    name: 'Directive',\n}));\n\nremoveDecorators(declarations);\n\nsaveActiveProject();\n`;\n","export const METHODS_SAMPLES = `import {\n    addMethods,\n    getMethods,\n    editMethods,\n    removeMethods,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddMethods(getClasses('some/path/file.ts', { name: 'B' }), {\n    name: 'test',\n    statements: 'return 0;',\n    returnType: 'number',\n});\n    \nconst declarations = getMethods(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditMethods(declarations, ({ isAsync }) => ({\n    name: 'b',\n    isAsync: !isAsync,\n}));\n\nremoveMethods(declarations);\n\nsaveActiveProject();\n`;\n","export const PROPERTIES_SAMPLES = `import {\n    addProperties,\n    getProperties,\n    editProperties,\n    removeProperties,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddProperties(getClasses('some/path/file.ts', { name: 'B' }), {\n    name: 'test',\n    initializer: '3',\n});\n    \nconst declarations = getProperties(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditProperties(declarations, () => ({\n    name: 'b',\n    initializer: \"'s'\",\n}));\n\nremoveProperties(declarations);\n\nsaveActiveProject();\n`;\n"],"names":["ACCESSORS_SAMPLES","CONSTRUCTORS_SAMPLES","DECORATORS_SAMPLES","METHODS_SAMPLES","PROPERTIES_SAMPLES","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵproperty","ctx_r0","add","getClasses","edit","remove","ctx_r1","constructors","ctx_r2","methods","ctx_r3","properties","ctx_r4","accessors","ctx_r5","decorators","ClassesComponent","constructor","_","_2","selectors","decls","vars","consts","template","ClassesComponent_Template","rf","ctx","ɵɵtemplate","ClassesComponent_ng_template_1_Template","ClassesComponent_ng_template_2_Template","ClassesComponent_ng_template_3_Template","ClassesComponent_ng_template_4_Template","ClassesComponent_ng_template_5_Template","ClassesComponent_ng_template_6_Template","RouterModule","TuiAddonDocModule","tuiGenerateRoutes","TuiLinkModule","ClassesModule","_3","forChild","declarations","imports","i1","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}