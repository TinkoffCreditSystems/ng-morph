{"version":3,"file":"node_modules_highlightjs-line-numbers_js_src_highlightjs-line-numbers_js.js","mappings":"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","sources":["./node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"sourcesContent":["// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf('Edge') !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    if (!isPluginDisabledForBlock(blocks[i])) {\n                        lineNumbersBlock(blocks[i], options);\n                    }\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function isPluginDisabledForBlock(element) {\n        return element.classList.contains('nohljsln');\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n\n        var internalOptions = mapOptions(element, options);\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, internalOptions);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, options) {\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > 1 || options.singleLine) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + options.startFrom,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {Object} options External API options.\n     * @returns {Object} Internal API options.\n     */\n    function mapOptions (element, options) {\n        options = options || {};\n        return {\n            singleLine: getSingleLineOption(options),\n            startFrom: getStartFromOption(element, options)\n        };\n    }\n\n    function getSingleLineOption (options) {\n        var defaultValue = false;\n        if (!!options.singleLine) {\n            return options.singleLine;\n        }\n        return defaultValue;\n    }\n\n    function getStartFromOption (element, options) {\n        var defaultValue = 1;\n        var startFrom = defaultValue;\n\n        if (isFinite(options.startFrom)) {\n            startFrom = options.startFrom;\n        }\n\n        // can be overridden because local option is priority\n        var value = getAttribute(element, 'data-ln-start-from');\n        if (value !== null) {\n            startFrom = toNumber(value, defaultValue);\n        }\n\n        return startFrom;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    ///\n    /// HELPERS\n    ///\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] !== undefined ? args[n] : m;\n        });\n    }\n\n    /**\n     * @param {HTMLElement} element Code block.\n     * @param {String} attrName Attribute name.\n     * @returns {String} Attribute value or empty.\n     */\n    function getAttribute (element, attrName) {\n        return element.hasAttribute(attrName) ? element.getAttribute(attrName) : null;\n    }\n\n    /**\n     * @param {String} str Source string.\n     * @param {Number} fallback Fallback value.\n     * @returns Parsed number or fallback value.\n     */\n    function toNumber (str, fallback) {\n        if (!str) return fallback;\n        var number = Number(str);\n        return isFinite(number) ? number : fallback;\n    }\n\n}(window, document));\n"],"names":["w","d","TABLE_NAME","LINE_NAME","CODE_BLOCK_NAME","NUMBERS_BLOCK_NAME","NUMBER_LINE_NAME","DATA_ATTR_NAME","BREAK_LINE_REGEXP","hljs","initLineNumbersOnLoad","lineNumbersBlock","lineNumbersValue","addStyles","console","error","isHljsLnCodeDescendant","domElt","curElt","className","indexOf","parentNode","getHljsLnTable","hljsLnDomElt","nodeName","edgeGetSelectedCodeLines","selection","selectionText","toString","tdAnchor","anchorNode","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","textContent","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","i","codeLineSel","format","codeLineElt","querySelector","document","addEventListener","e","window","getSelection","navigator","userAgent","clipboardData","setData","preventDefault","css","createElement","type","innerHTML","getElementsByTagName","appendChild","options","readyState","documentReady","blocks","querySelectorAll","hasOwnProperty","isPluginDisabledForBlock","element","classList","contains","async","lineNumbersInternal","value","internalOptions","mapOptions","duplicateMultilineNodes","addLineNumbersBlockFor","inputHtml","lines","getLines","length","trim","pop","singleLine","html","l","startFrom","getSingleLineOption","getStartFromOption","defaultValue","isFinite","getAttribute","toNumber","nodes","childNodes","node","child","getLinesCount","duplicateMultilineNode","test","result","lineText","text","split","match","func","setTimeout","args","replace","m","n","undefined","attrName","hasAttribute","str","fallback","number","Number"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}