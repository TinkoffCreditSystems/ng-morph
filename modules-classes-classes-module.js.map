{"version":3,"sources":["./apps/demo/src/app/modules/classes/samples/decorators.ts","./apps/demo/src/app/modules/classes/classes.module.ts","./apps/demo/src/app/modules/classes/samples/accessors.ts","./apps/demo/src/app/modules/classes/samples/contructors.ts","./apps/demo/src/app/modules/classes/samples/methods.ts","./apps/demo/src/app/modules/classes/samples/properties.ts","./apps/demo/src/app/modules/classes/classes.component.ts","./apps/demo/src/app/modules/classes/classes.template.html"],"names":[],"mappings":"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","file":"modules-classes-classes-module.js","sourcesContent":["export const DECORATORS_SAMPLES = `import {\n    addDecorators,\n    getDecorators,\n    editDecorators,\n    removeDecorators,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst classes = getClasses('some/path/file.ts');\nconst methods = getMethods(classes, { name: 'method' });\nconst constructorParams = getParams(getConstructors(classes), {\n  name: 'param',\n});\nconst methodParams = getParams(methods);\nconst properties = getProperties(classes, { name: 'property' });\nconst getAccessorss = getAccessors(classes, { name: 'getAccessor' });\nconst setAccessors = getAccessors(classes, { name: 'setAccessor' });\n\naddDecorators(classes, {\n  name: 'Component',\n  arguments: [\"{template: ''}\"],\n});\n\naddDecorators(methods, {\n  name: 'Required',\n  arguments: [],\n});\n\naddDecorators(constructorParams, {\n  name: 'Optional',\n  arguments: [],\n});\n\naddDecorators(methodParams, {\n  name: 'Pure',\n  arguments: [],\n});\n\naddDecorators(properties, {\n  name: 'ContentChild',\n  arguments: ['SomeComponent'],\n});\n\naddDecorators(getAccessorss, {\n  name: 'AnotherDecorator',\n  arguments: ['SomeComponent', \"['string']\"],\n});\n\naddDecorators(setAccessors, {\n  name: 'SetDecorator',\n  arguments: [\"[1, 3]\"],\n});\n\nconst declarations = getAllDecorators('some/path/**.ts', {\n    name: 'Inject',\n});\n\neditDecorators(declarations, () => ({\n    name: 'Directive',\n}));\n\nremoveDecorators(declarations);\n\nsaveActiveProject();\n`;\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { generateRoutes, TuiAddonDocModule } from '@taiga-ui/addon-doc';\nimport { TuiLinkModule } from '@taiga-ui/core';\nimport { ClassesComponent } from './classes.component';\n\n@NgModule({\n  imports: [\n    TuiLinkModule,\n    TuiAddonDocModule,\n    RouterModule.forChild(generateRoutes(ClassesComponent)),\n  ],\n  declarations: [ClassesComponent],\n  exports: [ClassesComponent],\n})\nexport class ClassesModule {}\n","export const ACCESSORS_SAMPLES = `import {\n    addAccessors,\n    getAccessors,\n    editAccessors,\n    removeAccessors,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddAccessors(getClasses('some/path/file.ts'), [\n    {\n      name: 'setter',\n      kind: StructureKind.SetAccessor,\n    },\n]);\n    \nconst declarations = getAccessors(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditAccessors(declarations, () => ({\n    name: 'anotherName',\n}));\n\nremoveAccessors(declarations);\n\nsaveActiveProject();\n`;\n","export const CONSTRUCTORS_SAMPLES = `import {\n    addConstructors,\n    getConstructors,\n    editConstructors,\n    removeConstructors,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddConstructors(getClasses('some/path/file.ts', { name: 'B' }), {\n    parameters: [\n      {\n        decorators: [{ name: 'Inject', arguments: ['SomeType'] }],\n        name: 'param',\n        type: 'SomeType',\n      },\n    ],\n    scope: Scope.Protected,\n});\n\n// Result is:\nclass B {\n    protected constructor(@Inject(SomeType) param: SomeType) {}\n}\n\nconst declarations = getConstructors(getClasses('some/path/**.ts'));\n\neditConstructors(declarations, () => ({\n    scope: Scope.Protected,\n}));\n\nremoveConstructors(declarations);\n\nsaveActiveProject();\n`;\n","export const METHODS_SAMPLES = `import {\n    addMethods,\n    getMethods,\n    editMethods,\n    removeMethods,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddMethods(getClasses('some/path/file.ts', { name: 'B' }), {\n    name: 'test',\n    statements: 'return 0;',\n    returnType: 'number',\n});\n    \nconst declarations = getMethods(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditMethods(declarations, ({ isAsync }) => ({\n    name: 'b',\n    isAsync: !isAsync,\n}));\n\nremoveMethods(declarations);\n\nsaveActiveProject();\n`;\n","export const PROPERTIES_SAMPLES = `import {\n    addProperties,\n    getProperties,\n    editProperties,\n    removeProperties,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddProperties(getClasses('some/path/file.ts', { name: 'B' }), {\n    name: 'test',\n    initializer: '3',\n});\n    \nconst declarations = getProperties(getClasses('some/path/**.ts'), {\n    name: 'd',\n    isStatic: true,\n});\n\neditProperties(declarations, () => ({\n    name: 'b',\n    initializer: \"'s'\",\n}));\n\nremoveProperties(declarations);\n\nsaveActiveProject();\n`;\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ACCESSORS_SAMPLES } from './samples/accessors';\nimport { CONSTRUCTORS_SAMPLES } from './samples/contructors';\nimport { DECORATORS_SAMPLES } from './samples/decorators';\nimport { METHODS_SAMPLES } from './samples/methods';\nimport { PROPERTIES_SAMPLES } from './samples/properties';\n\nconst add = `import {\n    addClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\naddClasses('some/path/file.ts', {\n    name: 'A',\n    isDefaultExport: true,\n    methods: [\n      {\n        name: 'method',\n        isStatic: true,\n        statements: 'return 0',\n        returnType: 'number',\n      },\n    ],\n});\n\nsaveActiveProject();\n`;\n\nconst edit = `import {\n    getClasses,\n    editClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst classes = getClasses('some/path/file.ts');\n\neditClasses(classes, classEntity => ({\n  isExported: true,\n  name: classEntity.name.replace('Test', ''),\n}));\n\nsaveActiveProject();\n`;\n\nconst remove = `import {\n    removeClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nremoveClasses(getClasses('**/**', { name: 'A' }));`;\n\nconst getClasses = `import {\n    getClasses,\n    setActiveProject,\n    saveActiveProject,\n} from 'ng-morph';\n\nsetActiveProject(createProject(new NgMorphTree(), '/', ['**/*.ts'));\n\nconst allClassesWithNameB = getClasses('some/path/**.ts', {\n    name: 'B',\n});\n\nsaveActiveProject();\n`;\n\n@Component({\n  selector: 'classes',\n  templateUrl: 'classes.template.html',\n  styleUrls: ['./classes.style.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ClassesComponent {\n  readonly add = add;\n  readonly edit = edit;\n  readonly remove = remove;\n  readonly getClasses = getClasses;\n\n  readonly accessors = ACCESSORS_SAMPLES;\n  readonly methods = METHODS_SAMPLES;\n  readonly properties = PROPERTIES_SAMPLES;\n  readonly decorators = DECORATORS_SAMPLES;\n  readonly constructors = CONSTRUCTORS_SAMPLES;\n}\n","<tui-doc-page header=\"Classes\">\n  <ng-template pageTab=\"Classes\">\n    <p>You can manipulate with classes using the following utils</p>\n\n    <section>\n      <h2>Add classes</h2>\n\n      <p>\n        You can generate a class from declarative description. Use autocomplete\n        to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"add\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Get classes</h2>\n\n      <p>\n        You can get all classes with some declarative condition. Use\n        autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"getClasses\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Edit classes</h2>\n\n      <p>\n        You can edit existing classes with a handler returining a declarative\n        description. Use autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"edit\"></tui-doc-code>\n    </section>\n\n    <section>\n      <h2>Remove classes</h2>\n\n      <p>\n        You can remove all classes with some declarative condition. Use\n        autocomplete to check all the abilities.\n      </p>\n\n      <tui-doc-code filename=\"migration.ts\" [code]=\"remove\"></tui-doc-code>\n    </section>\n  </ng-template>\n\n  <ng-template pageTab=\"Constructors\">\n    <p>\n      You can create, get, edit and remove constructors of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"constructors\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Methods\">\n    <p>\n      You can create, get, edit and remove methods of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"methods\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Properties\">\n    <p>\n      You can create, get, edit and remove properties of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"properties\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Accessors\">\n    <p>\n      You can create, get, edit and remove accessors of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"accessors\"></tui-doc-code>\n  </ng-template>\n\n  <ng-template pageTab=\"Decorators\">\n    <p>\n      You can create, get, edit and remove decorators of your classes with\n      declarative descriptions and conditions.\n    </p>\n\n    <tui-doc-code filename=\"migration.ts\" [code]=\"decorators\"></tui-doc-code>\n  </ng-template>\n</tui-doc-page>\n"],"sourceRoot":"webpack:///"}